name: Build and Publish the noseyparker-scanner Docker Image

on:
  workflow_dispatch: # For manual triggering
  push:
    branches: [ "main" ]
    # Trigger on changes to noseyparker-scanner files
    paths:
      - 'projects/noseyparker_scanner/**'
      - '.github/workflows/docker-build-noseyparker.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: "specterops/nemesis"

jobs:
  build-noseyparker-scanner:
    strategy:
      matrix:
        include:
          - name: noseyparker-scanner
            context: .
            dockerfile: ./projects/noseyparker_scanner/Dockerfile.new
            runner: ubuntu-22.04
            platform: linux/amd64
            arch: amd64
          - name: noseyparker-scanner
            context: .
            dockerfile: ./projects/noseyparker_scanner/Dockerfile.new
            runner: ubuntu-22.04-arm
            platform: linux/arm64
            arch: arm64

    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
      actions: write  # Added for cache cleanup

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # Use larger instance for better performance
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      # Create cargo directories to avoid cache warnings
      - name: Create Cargo directories
        run: |
          mkdir -p ~/.cargo/registry/index/
          mkdir -p ~/.cargo/registry/cache/
          mkdir -p ~/.cargo/git/db/

      # Pre-warm Rust registry cache (architecture-specific)
      - name: Cache Rust registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-${{ matrix.arch }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-cargo-registry-
            ${{ runner.os }}-cargo-registry-

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for ${{ matrix.name }} image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.name }}
          tags: |
            type=sha,format=short,suffix=-${{ matrix.arch }}
            type=ref,event=branch,suffix=-${{ matrix.arch }}
            type=ref,event=pr,suffix=-${{ matrix.arch }}
            type=raw,value=latest-${{ matrix.arch }},enable={{is_default_branch}}
            type=raw,value=cache-${{ matrix.arch }}

      - name: Build and push ${{ matrix.name }} image
        uses: docker/build-push-action@v5
        timeout-minutes: 60  # 1 hour timeout
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            CARGO_INCREMENTAL=0
            CARGO_TERM_COLOR=always
            RUST_BACKTRACE=1
            CARGO_BUILD_JOBS=4
          # Conditional caching - simpler for ARM64
          cache-from: |
            type=gha,scope=noseyparker-scanner-${{ matrix.arch }}-${{ github.ref_name }}
            ${{ matrix.arch == 'amd64' && 'type=gha,scope=noseyparker-scanner-amd64-main' || 'type=gha,scope=noseyparker-scanner-arm64-main' }}
          cache-to: |
            type=gha,mode=${{ matrix.arch == 'arm64' && 'min' || 'max' }},scope=noseyparker-scanner-${{ matrix.arch }}-${{ github.ref_name }}

      - name: Test built image
        run: |
          # Test that the image runs and shows version
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/noseyparker-scanner:${{ steps.meta.outputs.version }} --help || true

      # Simple cache cleanup - keep only the 2 most recent caches
      - name: Simple cache cleanup
        if: success()
        run: |
          gh extension install actions/gh-actions-cache || true
          # Keep only the 2 most recent caches for this scope
          gh actions-cache list --key "noseyparker-scanner-${{ matrix.arch }}-${{ github.ref_name }}" --sort created-at --order desc | tail -n +3 | cut -f1 | xargs -I {} gh actions-cache delete {} --confirm || true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

  # Create multi-arch manifest
  create-manifest:
    needs: build-noseyparker-scanner
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write

    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for manifest
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/noseyparker-scanner
          tags: |
            type=sha,format=short
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create and push multi-arch manifest
        run: |
          # Create multi-arch manifests for each tag
          echo '${{ steps.meta.outputs.tags }}' | while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              echo "Creating manifest for: $tag"
              docker buildx imagetools create \
                --tag "$tag" \
                "${tag}-amd64" \
                "${tag}-arm64"
            fi
          done