name: Build and Publish Service Docker Images

on:
  push:
    # # To run on every push to main
    # branches: [ "main" ]

    # To run when release tags are created:
    tags: [ "v*.*.*" ]
  workflow_dispatch: # For manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: "specterops/nemesis" # ${{ github.repository }} causes issues as SpecterOps is not all lowercase

jobs:

  build-service-images:
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - runner: ubuntu-22.04
            platform: linux/amd64
          - runner: ubuntu-22.04-arm
            platform: linux/arm64
        service:
          - name: web-api
            context: .
            dockerfile: ./projects/web_api/Dockerfile
          - name: dotnet-api
            context: .
            dockerfile: ./projects/dotnet_api/Dockerfile
          - name: file-enrichment
            context: .
            dockerfile: ./projects/file_enrichment/Dockerfile
          - name: frontend
            context: ./projects/frontend
            dockerfile: ./projects/frontend/Dockerfile
          - name: jupyter
            context: ./projects/jupyter
            dockerfile: ./projects/jupyter/Dockerfile
          - name: alerting
            context: .
            dockerfile: ./projects/alerting/Dockerfile
          - name: triage
            context: .
            dockerfile: ./projects/triage/Dockerfile
          - name: cli
            context: .
            dockerfile: ./projects/cli/Dockerfile
          - name: housekeeping
            context: .
            dockerfile: ./projects/housekeeping/Dockerfile
          - name: document-conversion
            context: .
            dockerfile: ./projects/document_conversion/Dockerfile
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for ${{ matrix.service.name }} image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service.name }}
          tags: |
            type=sha,format=short
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push ${{ matrix.service.name }} image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PYTHON_BASE_DEV_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/python-base-dev:latest
            PYTHON_BASE_PROD_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/python-base-prod:latest
            INSPECT_ASSEMBLY_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/inspect-assembly:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

            # # If wanting to use the proper tag
            # PYTHON_BASE_DEV_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/python-base-dev:${{ needs.build-base-images.outputs.python-base-dev-tag }}
            # PYTHON_BASE_PROD_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/python-base-prod:${{ needs.build-base-images.outputs.python-base-prod-tag }}